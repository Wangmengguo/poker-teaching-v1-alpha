from poker_core.domain.actions import LegalAction
from poker_core.suggest.policy import policy_preflop_v1
from poker_core.suggest.types import Observation
from poker_core.suggest.types import PolicyConfig


def _obs_firstin_sb(combo: str, bb: int = 2) -> Observation:
    # SB first to act, to_call <= bb; all-in is legal
    return Observation(
        hand_id="h_exploit_jam",
        actor=0,
        street="preflop",
        bb=bb,
        pot=3,
        to_call=bb,  # allow blind completion
        acts=[
            LegalAction(action="check"),
            LegalAction(action="call", to_call=bb),
            LegalAction(action="allin"),
        ],
        tags=[],
        hand_class="unknown",
        table_mode="HU",
        button=0,  # SB is button and first to act
        spr_bucket="high",
        board_texture="na",
        ip=False,
        first_to_act=True,
        last_to_act=False,
        pot_now=3,
        combo=combo,
        last_bet=0,
        role="na",
        range_adv=False,
        nut_adv=False,
        facing_size_tag="na",
        pot_type="single_raised",
        last_aggressor=None,
    )


def test_exploit_firstin_allin_with_AJo(monkeypatch):
    monkeypatch.setenv("SUGGEST_EXPLOIT_PROFILE", "vs_allin")
    obs = _obs_firstin_sb("AJo")
    sug, rationale, policy, meta = policy_preflop_v1(obs, PolicyConfig())
    assert sug.get("action") == "allin", f"Exploit profile should jam first with AJo; got {sug}"


def test_exploit_firstin_allin_with_22(monkeypatch):
    monkeypatch.setenv("SUGGEST_EXPLOIT_PROFILE", "vs_allin")
    obs = _obs_firstin_sb("22")
    sug, rationale, policy, meta = policy_preflop_v1(obs, PolicyConfig())
    assert sug.get("action") == "allin", f"Exploit profile should jam first with 22; got {sug}"
