name: CI
on:
  pull_request:
  push:
    branches: [ main ]
permissions:
  contents: read
  issues: write
  pull-requests: write
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: Install deps
        run: |
          python -m pip install -U pip setuptools wheel
          pip install -e '.[dev]'
      - name: Lint (ruff/black/mypy)
        run: |
          ruff check .
          black --check .
          mypy packages/poker_core || true
      - name: Tests + Coverage (global 60%, core 80%)
        run: |
          coverage run -m pytest
          coverage report --fail-under=60
          coverage report --include "packages/poker_core/*" --fail-under=80
      - name: Preflop ranges gate (all strategies)
        run: |
          node scripts/check_preflop_ranges.js --dir packages/poker_core/suggest/config | tee gate_output.txt
      - name: Build Gate summary (markdown)
        if: always()
        run: |
          node - <<'NODE'
          const fs=require('fs');
          const txt=fs.readFileSync('gate_output.txt','utf8');
          const m=txt.match(/JSON Output:\n([\s\S]*)$/);
          if(!m){
            fs.writeFileSync('gate_summary.md', 'Gate JSON not captured.');
            process.exit(0);
          }
          const data=JSON.parse(m[1]);
          const P=(x)=> (100*x).toFixed(1)+'%';
          const order=['loose','medium','tight'];
          const buckets=['small','mid','large'];
          const lines=[];
          lines.push('Preflop Gate Summary');
          lines.push('');
          for(const s of order){
            const r=data.results[s];
            lines.push(`### ${s}`);
            lines.push(`- RFI: grid ${P(r.rfi.grid_pct)}, combos ${P(r.rfi.combos_pct)}`);
            for(const b of buckets){
              const d=r.defend[b];
              lines.push(`- ${b}: defend ${P(d.defend_pct)} (3bet ${P(d.threebet_share)}), overlap ${(100*d.overlap_pct).toFixed(1)}%`);
            }
            lines.push('');
          }
          if ((data.fails||[]).length){
            lines.push('Failures:');
            for(const f of data.fails) lines.push(`- ${f}`);
          } else {
            lines.push('All checks passed.');
          }
          fs.writeFileSync('gate_summary.md', lines.join('\n'));
          NODE
      - name: Add Gate summary to job summary
        if: always()
        run: cat gate_summary.md >> $GITHUB_STEP_SUMMARY
      - name: Comment Gate summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('gate_summary.md','utf8');
            const header = 'Preflop Gate Summary';
            const {owner, repo} = context.repo;
            const issue_number = context.issue.number;
            const { data: comments } = await github.rest.issues.listComments({owner, repo, issue_number});
            const existing = comments.find(c => (c.user.type === 'Bot') && c.body && c.body.includes(header));
            const newBody = `## ${header}\n\n${body}`;
            if (existing) {
              await github.rest.issues.updateComment({owner, repo, comment_id: existing.id, body: newBody});
            } else {
              await github.rest.issues.createComment({owner, repo, issue_number, body: newBody});
            }
      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-raw
          path: ./.coverage
